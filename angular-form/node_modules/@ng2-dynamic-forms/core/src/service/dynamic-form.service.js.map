{"version":3,"sources":["core/src/service/dynamic-form.service.ts"],"names":[],"mappings":"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","file":"dynamic-form.service.js","sourcesContent":["import {Inject, Optional} from \"@angular/core\";\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup,\n    FormArray,\n    Validators,\n    ValidatorFn,\n    AsyncValidatorFn,\n    NG_VALIDATORS,\n    NG_ASYNC_VALIDATORS\n} from \"@angular/forms\";\nimport {DynamicFormControlModel, DynamicValidatorsMap} from \"../model/dynamic-form-control.model\";\nimport {DynamicFormValueControlModel, DynamicFormControlValue} from \"../model/dynamic-form-value-control.model\";\nimport {DynamicFormArrayModel, DYNAMIC_FORM_CONTROL_TYPE_ARRAY} from \"../model/form-array/dynamic-form-array.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel} from \"../model/form-group/dynamic-form-group.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DynamicCheckboxGroupModel\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel} from \"../model/checkbox/dynamic-checkbox.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel} from \"../model/input/dynamic-input.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DynamicRadioGroupModel} from \"../model/radio/dynamic-radio-group.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel} from \"../model/select/dynamic-select.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel} from \"../model/slider/dynamic-slider.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel} from \"../model/switch/dynamic-switch.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel} from \"../model/textarea/dynamic-textarea.model\";\nimport {isFunction, isDefined} from \"../utils\";\n\nexport class DynamicFormService {\n\n    constructor(@Inject(FormBuilder) private formBuilder: FormBuilder,\n                @Optional() @Inject(NG_VALIDATORS) private NG_VALIDATORS: Array<ValidatorFn>,\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private NG_ASYNC_VALIDATORS: Array<AsyncValidatorFn>) {}\n\n    getCustomValidatorFn(validatorName: string): ValidatorFn | AsyncValidatorFn | undefined {\n\n        let validatorFn;\n\n        if (this.NG_VALIDATORS) {\n            validatorFn = this.NG_VALIDATORS.find(validator => validatorName === validator.name);\n        }\n\n        if (!isDefined(validatorFn) && this.NG_ASYNC_VALIDATORS) {\n            validatorFn = this.NG_ASYNC_VALIDATORS.find(asyncValidator => validatorName === asyncValidator.name);\n        }\n\n        return validatorFn;\n    }\n\n    getValidatorFn(validatorName: string, validatorArgs?: any): ValidatorFn | AsyncValidatorFn | never {\n\n        let validatorFn = Validators[validatorName] || this.getCustomValidatorFn(validatorName);\n\n        if (!isFunction(validatorFn)) {\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS or NG_ASYNC_VALIDATORS`);\n        }\n\n        return isDefined(validatorArgs) ? validatorFn(validatorArgs) : validatorFn;\n    }\n\n    getValidators(config: DynamicValidatorsMap): Array<ValidatorFn | AsyncValidatorFn> {\n\n        return isDefined(config) ?\n            Object.keys(config).map(validatorName => this.getValidatorFn(validatorName, config[validatorName])) : [];\n    }\n\n    createFormArray(model: DynamicFormArrayModel): FormArray {\n\n        let formArray = [];\n\n        for (let i = 0; i < model.size; i += 1) {\n            formArray.push(this.createFormGroup(model.get(i).group));\n        }\n\n        return this.formBuilder.array(\n            formArray,\n            this.getValidators(model.validator)[0] || null,\n            this.getValidators(model.asyncValidator)[0] || null\n        );\n    }\n\n    createFormGroup(group: Array<DynamicFormControlModel>, groupExtra: {[key: string]: any} | null = null): FormGroup {\n\n        let formGroup = {};\n\n        group.forEach(model => {\n\n            if (model.type === DYNAMIC_FORM_CONTROL_TYPE_ARRAY) {\n\n                let arrayModel = <DynamicFormArrayModel> model;\n\n                formGroup[model.id] = this.createFormArray(arrayModel);\n\n            } else if (model.type === DYNAMIC_FORM_CONTROL_TYPE_GROUP || model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP) {\n\n                let groupModel = <DynamicFormGroupModel> model,\n                    groupExtra = {\n                        validator: this.getValidators(groupModel.validator)[0] || null,\n                        asyncValidator: this.getValidators(groupModel.asyncValidator)[0] || null\n                    };\n\n                formGroup[model.id] = this.createFormGroup(groupModel.group, groupExtra);\n\n            } else {\n\n                let valueControlModel = <DynamicFormValueControlModel<DynamicFormControlValue>> model;\n\n                formGroup[valueControlModel.id] = new FormControl(\n                    {\n                        value: valueControlModel.value,\n                        disabled: valueControlModel.disabled\n                    },\n                    Validators.compose(this.getValidators(valueControlModel.validators || [])),\n                    Validators.composeAsync(this.getValidators(valueControlModel.asyncValidators || []))\n                );\n            }\n        });\n\n        return this.formBuilder.group(formGroup, groupExtra);\n    }\n\n    createFormArrayGroup(formArrayModel: DynamicFormArrayModel): FormGroup {\n\n        return this.createFormGroup(formArrayModel.addGroup().group);\n    }\n\n    addFormArrayGroup(formArray: FormArray, model: DynamicFormArrayModel): void {\n\n        formArray.push(this.createFormArrayGroup(model));\n    }\n\n    insertFormArrayGroup(index: number, formArray: FormArray, model: DynamicFormArrayModel): void {\n\n        formArray.insert(index, this.createFormGroup(model.insertGroup(index).group));\n    }\n\n    removeFormArrayGroup(index: number, formArray: FormArray, model: DynamicFormArrayModel): void {\n\n        formArray.removeAt(index);\n        model.removeGroup(index);\n    }\n\n    clearFormArray(formArray: FormArray, model: DynamicFormArrayModel): void {\n\n        while (formArray.length > 0) {\n            this.removeFormArrayGroup(0, formArray, model);\n        }\n    }\n\n    findById(id: string, group: Array<DynamicFormControlModel>): DynamicFormControlModel {\n\n        return group.find(controlModel => controlModel.id === id);\n    }\n\n    fromJSON(json: Array<Object>): Array<DynamicFormControlModel> | never {\n\n        let formModel: Array<DynamicFormControlModel> = [];\n\n        json.forEach(object => {\n\n            switch (object[\"type\"]) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                    object[\"groups\"].forEach(groupObject => groupObject[\"group\"] = this.fromJSON(groupObject[\"group\"]));\n                    object[\"createGroup\"] = () => this.fromJSON(object[\"originGroup\"]);\n                    formModel.push(new DynamicFormArrayModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                    formModel.push(new DynamicCheckboxModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n                    object[\"group\"] = this.fromJSON(object[\"group\"]);\n                    formModel.push(new DynamicCheckboxGroupModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                    object[\"group\"] = this.fromJSON(object[\"group\"]);\n                    formModel.push(new DynamicFormGroupModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                    formModel.push(new DynamicInputModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                    formModel.push(new DynamicRadioGroupModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                    formModel.push(new DynamicSelectModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                    formModel.push(new DynamicSliderModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                    formModel.push(new DynamicSwitchModel(object, object[\"cls\"]));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                    formModel.push(new DynamicTextAreaModel(object, object[\"cls\"]));\n                    break;\n\n                default:\n                    throw new Error(`unknown form control type with id \"${object[\"id\"]}\" defined on JSON object`);\n            }\n        });\n\n        return formModel;\n    }\n}"]}