"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var dynamic_form_control_relation_model_1 = require("../model/dynamic-form-control-relation.model");
var DynamicFormRelationService = (function () {
    function DynamicFormRelationService() {
    }
    DynamicFormRelationService.prototype.findActivationRelation = function (relGroups) {
        return relGroups.find(function (rel) { return rel.action === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_ACTION_DISABLE || rel.action === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_ACTION_ENABLE; });
    };
    DynamicFormRelationService.prototype.getRelatedFormControls = function (model, controlGroup) {
        var controls = [];
        model.relation.forEach(function (relGroup) { return relGroup.when.forEach(function (rel) {
            if (model.id === rel.id) {
                throw new Error("FormControl " + model.id + " cannot depend on itself");
            }
            var control = controlGroup.get(rel.id);
            if (control && !controls.some(function (controlElement) { return controlElement === control; })) {
                controls.push(control);
            }
        }); });
        return controls;
    };
    DynamicFormRelationService.prototype.isFormControlToBeDisabled = function (relGroup, formGroup) {
        return relGroup.when.reduce(function (toBeDisabled, rel, index) {
            var control = formGroup.get(rel.id);
            if (control && relGroup.action === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_ACTION_DISABLE) {
                if (index > 0 && relGroup.connective === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && !toBeDisabled) {
                    return false;
                }
                if (index > 0 && relGroup.connective === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && toBeDisabled) {
                    return true;
                }
                return rel.value === control.value || rel.status === control.status;
            }
            if (control && relGroup.action === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_ACTION_ENABLE) {
                if (index > 0 && relGroup.connective === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && toBeDisabled) {
                    return true;
                }
                if (index > 0 && relGroup.connective === dynamic_form_control_relation_model_1.DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && !toBeDisabled) {
                    return false;
                }
                return !(rel.value === control.value || rel.status === control.status);
            }
            return false;
        }, false);
    };
    return DynamicFormRelationService;
}());
DynamicFormRelationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], DynamicFormRelationService);
exports.DynamicFormRelationService = DynamicFormRelationService;

//# sourceMappingURL=dynamic-form-relation.service.js.map
