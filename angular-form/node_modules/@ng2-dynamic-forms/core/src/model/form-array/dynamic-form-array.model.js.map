{"version":3,"sources":["core/src/model/form-array/dynamic-form-array.model.ts"],"names":[],"mappings":"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","file":"dynamic-form-array.model.js","sourcesContent":["import {\n    DynamicFormControlModel,\n    DynamicFormControlModelConfig,\n    DynamicValidatorsMap,\n    ClsConfig\n} from \"../dynamic-form-control.model\";\nimport {DynamicFormValueControlModel, DynamicFormControlValue} from \"../dynamic-form-value-control.model\";\nimport {serializable, serialize} from \"../../decorator/serializable.decorator\";\nimport {getValue, isFunction} from \"../../utils\";\n\nexport class DynamicFormArrayGroupModel {\n\n    context: DynamicFormArrayModel;\n    @serializable() group: Array<DynamicFormValueControlModel<any>>;\n    @serializable() index: number | null;\n\n    constructor(context: DynamicFormArrayModel,\n                group: Array<DynamicFormValueControlModel<DynamicFormControlValue>> = [],\n                index: number | null = null) {\n\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    asyncValidator?: DynamicValidatorsMap;\n    createGroup?: () => Array<DynamicFormValueControlModel<DynamicFormControlValue>>;\n    groups?: Array<DynamicFormArrayGroupModel>;\n    initialCount?: number;\n    validator?: DynamicValidatorsMap;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() private groups: Array<DynamicFormArrayGroupModel> = [];\n    @serializable() private originGroup: Array<DynamicFormValueControlModel<DynamicFormControlValue>>; // only to reinstantiate from JSON\n\n    @serializable() asyncValidator: DynamicValidatorsMap | null;\n    createGroup: () => Array<DynamicFormValueControlModel<DynamicFormControlValue>>;\n    @serializable() initialCount: number;\n    @serializable() validator: DynamicValidatorsMap | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, cls?: ClsConfig) {\n\n        super(config, cls);\n\n        if (!isFunction(config[\"createGroup\"])) {\n            throw new Error(\"createGroup function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.asyncValidator = getValue(config, \"asyncValidator\", null);\n        this.createGroup = config[\"createGroup\"];\n        this.initialCount = getValue(config, \"initialCount\", 1);\n        this.originGroup = this.createGroup();\n        this.validator = getValue(config, \"validator\", null);\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\n            });\n\n        } else {\n\n            for (let i = 0; i < this.initialCount; i += 1) {\n                this.addGroup();\n            }\n        }\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.createGroup());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n}"]}