import { EventEmitter, TemplateRef, OnInit, OnDestroy } from "@angular/core";
import { FormControl, FormGroup } from "@angular/forms";
import { DynamicFormControlModel } from "../model/dynamic-form-control.model";
import { DynamicFormControlValue } from "../model/dynamic-form-value-control.model";
import { DynamicFormControlRelationGroup } from "../model/dynamic-form-control-relation.model";
import { DynamicFormRelationService } from "../service/dynamic-form-relation.service";
export interface DynamicFormControlEvent {
    $event: Event | FocusEvent | any;
    control: FormControl;
    model: DynamicFormControlModel;
}
export declare abstract class DynamicFormControlComponent implements OnInit, OnDestroy {
    private relationService;
    bindId: boolean;
    blur: EventEmitter<DynamicFormControlEvent>;
    change: EventEmitter<DynamicFormControlEvent>;
    control: FormControl;
    controlGroup: FormGroup;
    customTemplate: TemplateRef<any>;
    focus: EventEmitter<DynamicFormControlEvent>;
    hasErrorMessaging: boolean;
    hasFocus: boolean;
    model: DynamicFormControlModel;
    nestedTemplate: TemplateRef<any>;
    private subscriptions;
    readonly abstract type: string;
    constructor(relationService: DynamicFormRelationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    readonly errorMessages: Array<string>;
    readonly isValid: boolean;
    readonly isInvalid: boolean;
    setControlRelations(): void;
    updateModelDisabled(relation: DynamicFormControlRelationGroup): void;
    onControlValueChanges(value: DynamicFormControlValue): void;
    onModelValueUpdates(value: DynamicFormControlValue): void;
    onModelDisabledUpdates(value: boolean): void;
    onValueChange($event: Event | DynamicFormControlEvent): void;
    onFocusChange($event: FocusEvent | DynamicFormControlEvent): void;
}
