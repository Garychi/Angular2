"use strict";
var dynamic_form_value_control_model_1 = require("../model/dynamic-form-value-control.model");
var dynamic_input_model_1 = require("../model/input/dynamic-input.model");
var utils_1 = require("../utils");
var DynamicFormControlComponent = (function () {
    function DynamicFormControlComponent(relationService) {
        this.relationService = relationService;
        this.hasErrorMessaging = false;
        this.subscriptions = [];
    }
    DynamicFormControlComponent.prototype.ngOnInit = function () {
        if (!utils_1.isDefined(this.model) || !utils_1.isDefined(this.controlGroup)) {
            throw new Error("no [model] or [controlGroup] property binding defined for DynamicFormControlComponent");
        }
        this.control = this.controlGroup.get(this.model.id);
        this.subscriptions.push(this.control.valueChanges.subscribe(this.onControlValueChanges.bind(this)));
        this.subscriptions.push(this.model.disabledUpdates.subscribe(this.onModelDisabledUpdates.bind(this)));
        if (this.model instanceof dynamic_form_value_control_model_1.DynamicFormValueControlModel) {
            var model = this.model;
            this.subscriptions.push(model.valueUpdates.subscribe(this.onModelValueUpdates.bind(this)));
        }
        if (this.model.relation.length > 0) {
            this.setControlRelations();
        }
    };
    DynamicFormControlComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    Object.defineProperty(DynamicFormControlComponent.prototype, "errorMessages", {
        get: function () {
            var _this = this;
            var messages = [];
            if (utils_1.isDefined(this.model["errorMessages"])) {
                for (var validatorName in this.control.errors) {
                    var message = void 0;
                    if (validatorName === "minlength" || validatorName === "maxlength") {
                        validatorName = validatorName.replace("length", "Length");
                    }
                    if (this.model["errorMessages"][validatorName]) {
                        message = this.model["errorMessages"][validatorName].replace(/\{\{(.+?)\}\}/mg, function (match, propertyName) { return _this.model[propertyName] ? _this.model[propertyName] : null; });
                    }
                    else {
                        message = "Error on \"" + validatorName + "\" validation";
                    }
                    messages.push(message);
                }
            }
            return messages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "isValid", {
        get: function () {
            return this.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "isInvalid", {
        get: function () {
            return this.control.touched && this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    DynamicFormControlComponent.prototype.setControlRelations = function () {
        var _this = this;
        var relActivation = this.relationService.findActivationRelation(this.model.relation);
        if (relActivation) {
            this.updateModelDisabled(relActivation);
            this.relationService.getRelatedFormControls(this.model, this.controlGroup).forEach(function (control) {
                _this.subscriptions.push(control.valueChanges.subscribe(function () { return _this.updateModelDisabled(relActivation); }));
                _this.subscriptions.push(control.statusChanges.subscribe(function () { return _this.updateModelDisabled(relActivation); }));
            });
        }
    };
    DynamicFormControlComponent.prototype.updateModelDisabled = function (relation) {
        this.model.disabledUpdates.next(this.relationService.isFormControlToBeDisabled(relation, this.controlGroup));
    };
    DynamicFormControlComponent.prototype.onControlValueChanges = function (value) {
        if (this.model instanceof dynamic_form_value_control_model_1.DynamicFormValueControlModel) {
            var model = this.model;
            if (model.value !== value) {
                model.valueUpdates.next(value);
            }
        }
    };
    DynamicFormControlComponent.prototype.onModelValueUpdates = function (value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    };
    DynamicFormControlComponent.prototype.onModelDisabledUpdates = function (value) {
        value ? this.control.disable() : this.control.enable();
    };
    DynamicFormControlComponent.prototype.onValueChange = function ($event) {
        if ($event instanceof Event) {
            $event.stopImmediatePropagation();
            if (this.model.type === dynamic_input_model_1.DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                var model = this.model;
                if (model.inputType === dynamic_input_model_1.DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    model.files = $event.srcElement["files"];
                }
            }
            this.change.emit({ $event: $event, control: this.control, model: this.model });
        }
        else if ($event.hasOwnProperty("source") || $event.hasOwnProperty("originalEvent")) {
            this.change.emit({ $event: $event, control: this.control, model: this.model });
        }
        else {
            this.change.emit($event);
        }
    };
    DynamicFormControlComponent.prototype.onFocusChange = function ($event) {
        if ($event instanceof FocusEvent) {
            $event.stopImmediatePropagation();
            this.hasFocus = $event.type === "focus";
            this[$event.type].emit({ $event: $event, control: this.control, model: this.model });
        }
        else {
            this[$event.$event.type].emit($event);
        }
    };
    return DynamicFormControlComponent;
}());
exports.DynamicFormControlComponent = DynamicFormControlComponent;

//# sourceMappingURL=dynamic-form-control.component.js.map
